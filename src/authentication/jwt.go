package authentication

import (
	"github.com/dgrijalva/jwt-go"
	"os"
	"time"
)

/*
Процедура аутентификации на основе токенов:


1) Пользователь вводит имя и пароль.
2) Сервер проверяет их и возвращает токен (JWT), который может содержать метаданные вроде user_id, разрешений и т. д.
3) Токен хранится на клиентской стороне, чаще всего в локальном хранилище, но может лежать и в хранилище сессий или кук.
4) Последующие запросы к серверу обычно содержат этот токен в качестве дополнительного заголовка авторизации в виде Bearer {JWT}. Ещё токен может пересылаться в теле POST-запроса и даже как параметр запроса.
5) Сервер расшифровывает JWT, если токен верный, сервер обрабатывает запрос.
6) Когда пользователь выходит из системы, токен на клиентской стороне уничтожается, с сервером взаимодействовать не нужно.

https://m.habr.com/ru/company/mailru/blog/343288/
*/

// Логика генерации JWT обрабатывается CreateToken.
func CreateToken(userId uint64) (string, error) {
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
		"user_id":       userId,
		"is_authorized": true,
		"exp":           time.Now().Add(time.Minute * 15).Unix(),
	})

	return token.SignedString([]byte(os.Getenv("SECRET")))
}

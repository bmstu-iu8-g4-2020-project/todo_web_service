package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"time"

	"github.com/Syfaro/telegram-bot-api"

	"github.com/bmstu-iu8-g4-2020-project/todo_web_service/src/telegram_bot/fast_task"
	"github.com/bmstu-iu8-g4-2020-project/todo_web_service/src/telegram_bot/schedule"
	"github.com/bmstu-iu8-g4-2020-project/todo_web_service/src/telegram_bot/user"
	"github.com/bmstu-iu8-g4-2020-project/todo_web_service/src/telegram_bot/utils"
	"github.com/bmstu-iu8-g4-2020-project/todo_web_service/src/telegram_bot/weather"
)

const (
	SuburbanServiceUrl = utils.DefaultServiceUrl + "suburban"
)

func main() {
	botToken := os.Getenv("BOT_TOKEN")

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}

	_, err = bot.RemoveWebhook()
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s (@%s)", bot.Self.FirstName, bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç API
	var userConfig = tgbotapi.NewUpdate(0)
	userConfig.Timeout = 60
	updates, err := bot.GetUpdatesChan(userConfig)
	if err != nil {
		log.Fatal(err)
	}

	// –í –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ –¥–µ–¥–ª–∞–π–Ω—ã fast_task'–æ–≤.
	go fast_task.CheckFastTasks(&bot)

	// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
	userStates := make(map[int]user.State)
	err = user.GetStates(&userStates)
	if err != nil {
		log.Fatal(err)
	}

	stateFuncDict := make(map[int]user.StateFunc)
	fast_task.FillFastTaskFuncs(&stateFuncDict)
	schedule.FillScheduleFuncs(&stateFuncDict)
	weather.FillWeatherFuncs(&stateFuncDict)

	var chatId int64
	var userId int
	var userName string

	// –ß–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
	for update := range updates {
		if update.CallbackQuery != nil {
			chatId = update.CallbackQuery.Message.Chat.ID
			userId = update.CallbackQuery.From.ID
			userName = update.CallbackQuery.From.UserName
		} else {
			chatId = update.Message.Chat.ID
			userId = update.Message.From.ID
			userName = update.Message.From.UserName
		}

		userStateCode := userStates[userId].Code

		if update.Message != nil {
			switch update.Message.Command() {
			case "start":
				if user.IsStartState(userStateCode) {
					err = user.InitUser(userId, userName)
					if err != nil {
						log.Fatal(err)
					}
					_, _ = bot.Send(tgbotapi.NewMessage(chatId,
						fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", userName)))
					bot.Send(tgbotapi.NewStickerShare(chatId, utils.StickerWelcome))
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "userinfo":
				if user.IsStartState(userStateCode) {
					respUser, err := user.GetUser(userId)
					if err != nil {
						log.Fatal(err)
					}
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, fmt.Sprintf("%s, \n–í–∞—à üÜî: %s",
						respUser.UserName, strconv.Itoa(respUser.Id))))
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			//case "suburban":
			//	if user.IsStartState(userStateCode) {
			//		resp, err := http.Get(SuburbanServiceUrl)
			//		if err != nil {
			//			log.Fatal(err)
			//		}
			//
			//		body, _ := ioutil.ReadAll(resp.Body)
			//
			//		_, _ = bot.Send(tgbotapi.NewMessage(chatId, string(body)))
			//	} else {
			//		user.SendEnteringNotFinished(&bot, chatId)
			//	}
			//	continue
			case "weather":
				if user.IsStartState(userStateCode) {
					msg := tgbotapi.NewMessage(chatId, "–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ:")
					msg.ReplyMarkup = WeatherKeyboard
					_, _ = bot.Send(msg)
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "add_fast_task":
				if user.IsStartState(userStateCode) {
					state := user.State{Code: user.FAST_TASK_ENTER_TITLE, Request: "{}"}
					_ = user.SetState(userId, userName, &userStates, state)
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiFastTask+
						"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."))
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "fast_tasks":
				if user.IsStartState(userStateCode) {
					// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
					_, reply, err := fast_task.OutputFastTasks(userId)
					if err != nil {
						log.Fatal(err)
					}
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, reply))
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "delete_fast_task":
				if user.IsStartState(userStateCode) {
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiNumber+
						"–ö–∞–∫–∞—è –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥–∞—á —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞? (–≤–≤–µ–¥–∏—Ç–µ –µ—ë –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä)"))
					_, output, err := fast_task.OutputFastTasks(userId)
					if err != nil {
						log.Fatal(err)
					}
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, output))
					_ = user.SetState(userId, userName, &userStates,
						user.State{Code: user.FAST_TASK_DELETE_ENTER_NUM, Request: "{}"})
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "fill_schedule":
				if user.IsStartState(userStateCode) {
					msg := tgbotapi.NewMessage(chatId,
						utils.EmojiWeekday+"–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ:")
					msg.ReplyMarkup = WeekdayScheduleKeyboard
					_, _ = bot.Send(msg)
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "full_schedule":
				if user.IsStartState(userStateCode) {
					schedule.GetFullSchedule(&bot, userId, chatId)
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
			case "today_schedule":
				if user.IsStartState(userStateCode) {
					_, output, err := schedule.GetWeekdaySchedule(userId, time.Now().Weekday())
					if err != nil {
						log.Fatal(err)
					}

					_, _ = bot.Send(tgbotapi.NewMessage(chatId, output))
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "tomorrow_schedule":
				if user.IsStartState(userStateCode) {
					_, output, err := schedule.GetWeekdaySchedule(userId, schedule.NextWeekday(time.Now().Weekday()))
					if err != nil {
						log.Fatal(err)
					}
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, output))
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "weekday_schedule":
				if user.IsStartState(userStateCode) {
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiWeekday+
						"–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"))
					_ = user.SetState(userId, userName, &userStates,
						user.State{Code: user.SCHEDULE_ENTER_OUTPUT_WEEKDAY, Request: "{}"})
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "delete_schedule":
				if user.IsStartState(userStateCode) {
					msg := tgbotapi.NewMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è:")
					msg.ReplyMarkup = ScheduleDeleteKeyboard
					_, _ = bot.Send(msg)
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "update_schedule_task":
				if user.IsStartState(userStateCode) {
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiWeekday+
						"–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É."))
					_ = user.SetState(userId, userName, &userStates,
						user.State{Code: user.SCHEDULE_UPDATE_ENTER_WEEKDAY, Request: "{}"})
				} else {
					user.SendEnteringNotFinished(&bot, chatId)
				}
				continue
			case "reset":
				if !user.IsStartState(userStateCode) {
					_ = user.ResetState(userId, userName, &userStates)
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiReset+"–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω."))
				} else {
					_, _ = bot.Send(tgbotapi.NewMessage(chatId,
						utils.EmojiWarning+"–í—ã –Ω–µ –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ. –í–∞–º –Ω–µ—á–µ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å"))
				}
				continue
			}
		}

		if update.CallbackQuery != nil {
			if user.IsStartState(userStateCode) {
				switch update.CallbackQuery.Data {
				case "add_mon":
					_ = schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_MON)
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiTitle+"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
				case "add_tue":
					_ = schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_TUE)
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiTitle+"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
				case "add_wed":
					_ = schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_WED)
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiTitle+"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
				case "add_thu":
					_ = schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_THU)
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiTitle+"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
				case "add_fri":
					_ = schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_FRI)
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiTitle+"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
				case "add_sat":
					_ = schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_SAT)
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiTitle+"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
				case "add_sun":
					_ = schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_SUN)
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiTitle+"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
				case "delete_schedule_task":
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiWeekday+
						"–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É."))
					_ = user.SetState(userId, userName, &userStates,
						user.State{Code: user.SCHEDULE_DELETE_WEEKDAY_TASK, Request: "{}"})
				case "clear_weekday_schedule":
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiWeekday+
						"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å?"))
					_ = user.SetState(userId, userName, &userStates,
						user.State{Code: user.SCHEDULE_DELETE_WEEKDAY, Request: "{}"})
				case "clear_schedule":
					_, _ = bot.Send(tgbotapi.NewMessage(chatId,
						fmt.Sprintf("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ %s–ü–û–õ–ù–û–°–¢–¨–Æ%s –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? –î–∞ –∏–ª–∏ –Ω–µ—Ç?",
							utils.EmojiWarning, utils.EmojiWarning)))
					_ = user.SetState(userId, userName, &userStates,
						user.State{Code: user.SCHEDULE_DELETE_CLEARALL, Request: "{}"})
				case "current_weather":
					msg := tgbotapi.NewMessage(chatId, "–ö–∞–∫ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ?")
					msg.ReplyMarkup = WeatherChooseCurrentKeyboard
					_, _ = bot.Send(msg)
				case "weather_forecast":
					msg := tgbotapi.NewMessage(chatId, "–ö–∞–∫ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã?")
					msg.ReplyMarkup = WeatherChooseForecastKeyboard
					_, _ = bot.Send(msg)
				case "curr_location":
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, fmt.Sprintf(
						"–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. \n(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ %s –∏ –≤—ã–±–µ—Ä–∏—Ç–µ \"–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è\")",
						utils.EmojiPaperclip)))
					_ = user.SetState(userId, userName, &userStates,
						user.State{Code: user.WEATHER_CURRENT_SEND_LOCATION, Request: "{}"})
				case "curr_place_name":
					_, _ = bot.Send(tgbotapi.NewMessage(chatId, utils.EmojiLocation+
						"–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."))
					_ = user.SetState(userId, userName, &userStates,
						user.State{Code: user.WEATHER_CURRENT_SEND_NAME, Request: "{}"})
				case "forecast_location":
					_, _ = (*bot).Send(tgbotapi.NewMessage(chatId, fmt.Sprintf(
						"–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é. \n(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ %s –∏ –≤—ã–±–µ—Ä–∏—Ç–µ \"–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è\")",
						utils.EmojiPaperclip)))
					_ = user.SetState(userId, userName, &userStates,
						user.State{Code: user.WEATHER_FORECAST_SEND_LOCATION, Request: "{}"})
				case "forecast_place_name":
					_, _ = (*bot).Send(tgbotapi.NewMessage(chatId, utils.EmojiLocation+
						"–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."))
					_ = user.SetState(userId, userName, &userStates,
						user.State{Code: user.WEATHER_FORECAST_SEND_NAME, Request: "{}"})
				}
				continue
			} else {
				_, _ = bot.Send(tgbotapi.NewMessage(chatId,
					utils.EmojiWarning+"–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. "+
						"–ó–∞–∫–æ–Ω—á–∏—Ç–µ –≤–≤–æ–¥, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset —á—Ç–æ–±—ã –µ–≥–æ –ø—Ä–µ—Ä–≤–∞—Ç—å."))
			}
		}

		// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
		if !user.IsStartState(userStateCode) {
			stateFuncDict[userStateCode](&update, &bot, &userStates)
		}
	}
}


var WeekdayScheduleKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "add_mon"),
		tgbotapi.NewInlineKeyboardButtonData("–ß–µ—Ç–≤–µ—Ä–≥", "add_thu"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–í—Ç–æ—Ä–Ω–∏–∫", "add_tue"),
		tgbotapi.NewInlineKeyboardButtonData("–ü—è—Ç–Ω–∏—Ü–∞", "add_fri"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°—Ä–µ–¥–∞", "add_wed"),
		tgbotapi.NewInlineKeyboardButtonData("–°—É–±–±–æ—Ç–∞", "add_sat"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "add_sun"),
	),
)

var ScheduleDeleteKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(utils.EmojiTitle+
			"–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "delete_schedule_task"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(utils.EmojiWeekday+
			"–û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å", "clear_weekday_schedule"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(utils.EmojiFire+
			"–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "clear_schedule"),
	),
)

var WeatherKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏", "current_weather"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π", "weather_forecast"),
	),
)

var WeatherChooseCurrentKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(utils.EmojiLocation+"–ü–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏", "curr_location"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(utils.EmojiMap+"–ü–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –º–µ—Å—Ç—É", "curr_place_name"),
	),
)

var WeatherChooseForecastKeyboard = tgbotapi.NewInlineKeyboardMarkup(
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(utils.EmojiLocation+"–ü–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏", "forecast_location"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(utils.EmojiMap+"–ü–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –º–µ—Å—Ç—É", "forecast_place_name"),
	),
)


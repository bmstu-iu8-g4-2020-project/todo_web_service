package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
	"todo_web_service/src/models"
	"todo_web_service/src/services"
	"todo_web_service/src/telegram_bot/schedule"
	"todo_web_service/src/telegram_bot/utils"

	"github.com/Syfaro/telegram-bot-api"
	"todo_web_service/src/telegram_bot/fast_task"
	"todo_web_service/src/telegram_bot/user"
)

const (
	DefaultServiceUrl  = "http://localhost:8080/"
	SuburbanServiceUrl = DefaultServiceUrl + "suburban"
)

func main() {
	botToken := os.Getenv("BOT_TOKEN")

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}

	_, err = bot.RemoveWebhook()
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç API
	var userConfig = tgbotapi.NewUpdate(0)

	userConfig.Timeout = 60
	updates, err := bot.GetUpdatesChan(userConfig)
	if err != nil {
		log.Fatal(err)
	}

	// –í –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º fast_task'–∏.
	go fast_task.CheckFastTasks(&bot)

	// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥.
	userStates := make(map[int]user.State)
	err = user.GetStates(&userStates)
	if err != nil {
		log.Fatal(err)
	}
	// —á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
	for update := range updates {
		chatId := update.Message.Chat.ID
		msg := update.Message
		userId := update.Message.From.ID
		userName := update.Message.From.UserName

		switch update.Message.Command() {
		case "start":
			if userStates[userId].Code == user.START {
				err = user.InitUser(userId, userName)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", userName)))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "userinfo":
			if userStates[userId].Code == user.START {
				user, err := user.GetUser(userId)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s. \n–í–∞—à üÜî: %s",
					user.UserName, strconv.Itoa(user.Id))))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "suburban":
			if userStates[userId].Code == user.START {
				resp, err := http.Get(SuburbanServiceUrl)
				if err != nil {
					log.Fatal(err)
				}

				body, _ := ioutil.ReadAll(resp.Body)

				bot.Send(tgbotapi.NewMessage(chatId, string(body)))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "add_fast_task":
			if userStates[userId].Code == user.START {
				state := user.State{Code: user.FAST_TASK_ENTER_TITLE, Request: "{}"}
				user.SetState(userId, userName, &userStates, state)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "fast_tasks":
			if userStates[userId].Code == user.START {
				// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
				_, reply, err := fast_task.OutputFastTasks(userId)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, reply))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "delete_fast_task":
			if userStates[userId].Code == user.START {
				bot.Send(tgbotapi.NewMessage(chatId,
					"–ö–∞–∫–∞—è –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥–∞—á —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞? (–≤–≤–µ–¥–∏—Ç–µ –µ—ë –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä)"))
				_, output, err := fast_task.OutputFastTasks(userId)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, output))
				user.SetState(userId, userName, &userStates, user.State{Code: user.FAST_TASK_DELETE, Request: "{}"})
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "fill_schedule":
			if userStates[userId].Code == user.START {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–µ–ª–∏ —é—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ:\n"+
					"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ /add_to_mon \n–í—Ç–æ—Ä–Ω–∏–∫ /add_to_tue \n–°—Ä–µ–¥–∞ /add_to_wed "+
					"\n–ß–µ—Ç–≤–µ—Ä–≥ /add_to_thu \n–ü—è—Ç–Ω–∏—Ü–∞ /add_to_fri \n–°—É–±–±–æ—Ç–∞ /add_to_sat \n–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ /add_to_sun"))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "today_schedule":
			if userStates[userId].Code == user.START {
				_, output, err := schedule.GetWeekdaySchedule(userId, time.Now().Weekday())
				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatId, output))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "tomorrow_schedule":
			if userStates[userId].Code == user.START {
				_, output, err := schedule.GetWeekdaySchedule(userId, time.Now().Weekday()+1)
				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatId, output))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "weekday_schedule":
			if userStates[userId].Code == user.START {
				bot.Send(tgbotapi.NewMessage(chatId, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"))
				user.SetState(userId, userName, &userStates, user.State{Code: user.SCHEDULE_ENTER_OUTPUT_WEEKDAY, Request: "{}"})
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "delete_schedule":
			if userStates[userId].Code == user.START {
				bot.Send(tgbotapi.NewMessage(chatId,
					"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear_schedule"))
				bot.Send(tgbotapi.NewMessage(chatId,
					"–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n/clear_weekday_schedule (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"))
				bot.Send(tgbotapi.NewMessage(chatId,
					"–ï—Å–ª–∏ –≤–∞–º –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫—É—é-—Ç–æ –∑–∞–¥–∞—á—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n/clear_schedule_task (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "add_to_mon":
			if userStates[userId].Code == user.START {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_MON)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "add_to_tue":
			if userStates[userId].Code == user.START {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_TUE)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "add_to_wed":
			if userStates[userId].Code == user.START {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_WED)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "add_to_thu":
			if userStates[userId].Code == user.START {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_THU)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "add_to_fri":
			if userStates[userId].Code == user.START {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_FRI)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "add_to_sat":
			if userStates[userId].Code == user.START {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_SAT)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "add_to_sun":
			if userStates[userId].Code == user.START {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_SUN)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "clear_schedule_task":
			if userStates[userId].Code == user.START {
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É."))
				user.SetState(userId, userName, &userStates, user.State{Code: user.SCHEDULE_DELETE_TASK, Request: "{}"})
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			} // TODO: –î–æ–¥–µ–ª–∞—Ç—å —Å–∏–µ.
			continue

		case "clear_schedule":
			if userStates[userId].Code == user.START {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–ù–û–°–¢–¨–Æ –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? –î–∞ –∏–ª–∏ –Ω–µ—Ç?"))
				user.SetState(userId, userName, &userStates, user.State{Code: user.SCHEDULE_DELETE_CLEARALL, Request: "{}"})
			} else {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. \n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset."))
			}
			continue
		case "reset":
			user.ResetState(userId, userName, &userStates)
			bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω."))
		}

		if userStates[userId].Code != user.START {

			/* FastTask */
			if userStates[userId].Code == user.FAST_TASK_ENTER_TITLE {
				var fastTask models.FastTask
				if msg.Text == "" {
					bot.Send(tgbotapi.NewMessage(chatId, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."))
					continue
				}
				fastTask.TaskName = msg.Text
				b, err := json.Marshal(fastTask)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId,
					"–í–≤–µ–¥–∏—Ç–µ, —Å –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. (–ù–∞–ø—Ä–∏–º–µ—Ä: 1h10m40s)"))

				user.SetState(userId, userName, &userStates,
					user.State{Code: user.FAST_TASK_ENTER_INTERVAL, Request: string(b)})
			} else if userStates[userId].Code == user.FAST_TASK_ENTER_INTERVAL {
				var fastTask models.FastTask
				interval, err := time.ParseDuration(update.Message.Text)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatId,
						"–ö–∞–∂–µ—Ç—Å—è, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É. (–ø—Ä–∏–º–µ—Ä: 1h40m13s) –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."))
					continue
				}
				currUser, err := user.GetUser(userId)
				if err != nil {
					log.Fatal(err)
				}
				data := []byte(currUser.StateRequest)

				err = json.Unmarshal(data, &fastTask)
				if err != nil {
					log.Fatal(err)
				}
				fastTask.NotifyInterval = interval

				err = fast_task.AddFastTask(userId, fastTask.TaskName, chatId, fastTask.NotifyInterval)

				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatId, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"))
				user.ResetState(userId, userName, &userStates)
			} else if userStates[userId].Code == user.FAST_TASK_DELETE {
				fastTasks, _, err := fast_task.OutputFastTasks(userId)

				// –°—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
				ftNumber, err := strconv.Atoi(msg.Text)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatId,
						"–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."))
					continue
				}

				if ftNumber <= 0 || ftNumber > len(fastTasks) {
					bot.Send(tgbotapi.NewMessage(chatId,
						"–ö–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–æ–≥–æ –¥–µ–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."))
					continue
				}

				fastTaskDeleteUrl := DefaultServiceUrl +
					fmt.Sprintf("%v/fast_task/%v", userId, fastTasks[ftNumber-1].Id)

				_, err = utils.Delete(fastTaskDeleteUrl)

				if err != nil {
					log.Fatal(err)
				}

				_, output, err := fast_task.OutputFastTasks(userId)
				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatId, fmt.Sprintf("–ó–∞–¥–∞—á–∞ %v —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n", ftNumber)+output))
				user.ResetState(userId, userName, &userStates)

				/* Schedule */
			} else if userStates[userId].Code == user.SCHEDULE_ENTER_TITLE {
				var scheduleTask models.ScheduleTask
				data := []byte(userStates[userId].Request)

				err = json.Unmarshal(data, &scheduleTask)
				if err != nil {
					log.Fatal(err)
				}

				if msg.Text == "" {
					bot.Send(tgbotapi.NewMessage(chatId,
						"–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."))

					continue
				}

				scheduleTask.Title = msg.Text
				b, err := json.Marshal(scheduleTask)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è."))

				user.SetState(userId, userName, &userStates,
					user.State{Code: user.SCHEDULE_ENTER_PLACE, Request: string(b)})
			} else if userStates[userId].Code == user.SCHEDULE_ENTER_PLACE {
				var scheduleTask models.ScheduleTask
				data := []byte(userStates[userId].Request)

				err = json.Unmarshal(data, &scheduleTask)
				if err != nil {
					log.Fatal(err)
				}

				if msg.Text == "" {
					bot.Send(tgbotapi.NewMessage(chatId,
						"–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è."))
					continue
				}

				scheduleTask.Place = msg.Text
				b, err := json.Marshal(scheduleTask)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞. (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –ª–µ–∫—Ç–æ—Ä–∞, –≤—ã—Å—Ç—É–ø–∞—é—â–µ–≥–æ)"))

				user.SetState(userId, userName, &userStates,
					user.State{Code: user.SCHEDULE_ENTER_SPEAKER, Request: string(b)})
			} else if userStates[userId].Code == user.SCHEDULE_ENTER_SPEAKER {
				var scheduleTask models.ScheduleTask
				data := []byte(userStates[userId].Request)

				err = json.Unmarshal(data, &scheduleTask)
				if err != nil {
					log.Fatal(err)
				}

				if msg.Text == "" {
					bot.Send(tgbotapi.NewMessage(chatId,
						"–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞."))
					continue
				}

				scheduleTask.Speaker = msg.Text
				b, err := json.Marshal(scheduleTask)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 10:00AM\n"))

				user.SetState(userId, userName, &userStates,
					user.State{Code: user.SCHEDULE_ENTER_START, Request: string(b)})
			} else if userStates[userId].Code == user.SCHEDULE_ENTER_START {
				var scheduleTask models.ScheduleTask
				data := []byte(userStates[userId].Request)

				err = json.Unmarshal(data, &scheduleTask)
				if err != nil {
					log.Fatal(err)
				}
				startTime, err := time.Parse(time.Kitchen, msg.Text)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatId, "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ. "+
						"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"))
					continue
				}
				scheduleTask.Start = startTime
				b, err := json.Marshal(scheduleTask)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–ª–∞. (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3:45PM)"))

				user.SetState(userId, userName, &userStates,
					user.State{Code: user.SCHEDULE_ENTER_END, Request: string(b)})
			} else if userStates[userId].Code == user.SCHEDULE_ENTER_END {
				var scheduleTask models.ScheduleTask
				data := []byte(userStates[userId].Request)

				err = json.Unmarshal(data, &scheduleTask)
				if err != nil {
					log.Fatal(err)
				}
				endTime, err := time.Parse(time.Kitchen, msg.Text)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatId, "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ. "+
						"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"))
					continue
				}
				scheduleTask.End = endTime

				err = schedule.AddScheduleTask(scheduleTask)
				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatId, fmt.Sprintf("–°—É–ø–µ—Ä! %s –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π.",
					services.WeekdayToStr(scheduleTask.WeekDay))))

				user.ResetState(userId, userName, &userStates)
			} else if userStates[userId].Code == user.SCHEDULE_ENTER_OUTPUT_WEEKDAY {
				weekday, err := services.StrToWeekday(strings.Title(msg.Text))
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatId, "–ù–µ—Ç-–Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"))
					continue
				}

				_, output, err := schedule.GetWeekdaySchedule(userId, weekday)
				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatId, output))

				user.ResetState(userId, userName, &userStates)
			} else if userStates[userId].Code == user.SCHEDULE_DELETE_CLEARALL {
				if strings.ToLower(msg.Text) == "–¥–∞" {
					bot.Send(tgbotapi.NewMessage(chatId, "–û–∫, –æ—á–∏—â–∞—é –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ..."))
					err := schedule.ClearAll(userId)
					if err != nil {
						log.Fatal(err)
					}

					bot.Send(tgbotapi.NewMessage(chatId, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ!"))
					user.ResetState(userId, userName, &userStates)
				} else if strings.ToLower(msg.Text) == "–Ω–µ—Ç" {
					bot.Send(tgbotapi.NewMessage(chatId, "–•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥–µ–º –Ω–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å."))
					user.ResetState(userId, userName, &userStates)
				} else {
					bot.Send(tgbotapi.NewMessage(chatId, "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –¥–∞, –ª–∏–±–æ –Ω–µ—Ç."))
				}
				continue
			} else if userStates[userId].Code == user.SCHEDULE_DELETE_TASK {
				weekday, err := services.StrToWeekday(strings.Title(msg.Text))
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatId, "–ù–µ—Ç-–Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)"))
					continue
				}

				weekdaySchedule, output, err := schedule.GetWeekdaySchedule(userId, weekday)
				if err != nil {
					log.Fatal(err)
				}
				if weekdaySchedule == nil {
					bot.Send(tgbotapi.NewMessage(chatId,
						fmt.Sprintf("–ö–∞–∂–µ—Ç—Å—è, –Ω–∞ %s –∑–∞–¥–∞—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª—è—Ç—å —Ç—É—Ç –Ω–µ—á–µ–≥–æ. –ï—â—ë —Ä–∞–∑–æ–∫? /clear_schedule_task",
							strings.ToLower(msg.Text))))
				}
				b, err = json.Marshal(weekdaySchedule)
				// TODO: –∑–∞–º–∞—Ä—à–µ–ª–∏—Ç—å weekdaySchedule –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –¥–∞–ª—å—à–µ.
				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatId, output))
				bot.Send(tgbotapi.NewMessage(chatId, "–ò—Ç–∞–∫, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑"))

				user.ResetState(userId, userName, &userStates)
			}
		}
	}
}

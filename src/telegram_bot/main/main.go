package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"
	"todo_web_service/src/models"

	"todo_web_service/src/telegram_bot/fast_task"
	"todo_web_service/src/telegram_bot/user"
	"todo_web_service/src/telegram_bot/utils"

	"github.com/Syfaro/telegram-bot-api"
)

const (
	DefaultServiceUrl  = "http://localhost:8080/"
	SuburbanServiceUrl = DefaultServiceUrl + "suburban"
)

func main() {
	botToken := os.Getenv("BOT_TOKEN")

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	_, err = bot.RemoveWebhook()
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç API
	var userConfig = tgbotapi.NewUpdate(0)

	userConfig.Timeout = 60
	updates, err := bot.GetUpdatesChan(userConfig)
	if err != nil {
		log.Fatal(err)
	}

	// –í –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º fast_task'–∏.
	go fast_task.CheckFastTasks(&bot)

	// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–¥.
	userStates := make(map[int]user.State)
	err = user.GetStates(&userStates)
	if err != nil {
		log.Fatal(err)
	}
	// —á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
	for update := range updates {
		chatID := update.Message.Chat.ID
		msg := update.Message
		userId := update.Message.From.ID
		userName := update.Message.From.UserName

		switch update.Message.Command() {
		case "start":
			if userStates[userId].Code == user.START {
				err = user.InitUser(userId, userName)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", userName)))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."))
			}
			continue
		case "userinfo":
			if userStates[userId].Code == user.START {
				user, err := user.GetUser(userId)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s. \n–í–∞—à üÜî: %s",
					user.UserName, strconv.Itoa(user.Id))))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."))
			}
			continue
		case "suburban":
			if userStates[userId].Code == user.START {
				resp, err := http.Get(SuburbanServiceUrl)
				if err != nil {
					log.Fatal(err)
				}

				body, _ := ioutil.ReadAll(resp.Body)

				bot.Send(tgbotapi.NewMessage(chatID, string(body)))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."))
			}
			continue
		case "add_fast_task":
			if userStates[userId].Code == user.START {
				state := user.State{Code: user.FAST_TASK_ENTER_TITLE, Request: "{}"}
				user.SetState(userId, userName, &userStates, state)
				bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."))
			}
			continue
		case "fast_tasks":
			if userStates[userId].Code == user.START {
				// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
				_, reply, err := fast_task.OutputFastTasks(userId)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatID, reply))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."))
			}
			continue
		case "delete_fast_task":
			if userStates[userId].Code == user.START {
				bot.Send(tgbotapi.NewMessage(chatID,
					"–ö–∞–∫–∞—è –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥–∞—á —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞? (–≤–≤–µ–¥–∏—Ç–µ –µ—ë –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä)"))
				_, output, err := fast_task.OutputFastTasks(userId)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatID, output))

				user.UpdateUser(userId, userName, user.FAST_TASK_DELETE, "")
				userStates[userId] = user.State{Code: user.FAST_TASK_DELETE, Request: ""}
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."))
			}
			continue
			//case "fill_schedule":
			//	bot.Send(tgbotapi.NewMessage(chatID, "–ò—Ç–∞–∫, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ "+
			//		"–∏ –∑–∞–ø–æ–ª–Ω–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö."))
			//	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
			//	assigneeSchedule, err := schedule.InitScheduleTable(userId) // –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –Ω–∞–º –Ω—É–∂–Ω—ã –æ—Ç—Å—é–¥–∞ sch_id –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–¥.
			//	if err != nil {
			//		log.Fatal(err)
			//	}
			//	// TODO: –¢—É—Ç –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é.
			//	var scheduleTasks []models.ScheduleTask // sch_id -> –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å.
			//	for _, weekdaySch := range assigneeSchedule {
			//		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–ó–∞–ø–æ–ª–Ω–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ %s\n –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–µ–ª –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.",
			//			services.ParseWeekdayToStr(weekdaySch.WeekDay))))
			//		// <...>
			//	}
			//
			//	err = schedule.FillSchedule(userId, scheduleTasks)
			//	if err != nil {
			//		log.Fatal(err)
			//	}
			//
			//	bot.Send(tgbotapi.NewMessage(chatID, "–ó–¥–æ—Ä–æ–≤–æ! –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! "))
			//}

		}

		if userStates[userId].Code != user.START {
			if userStates[userId].Code == user.FAST_TASK_ENTER_TITLE {
				var fastTask models.FastTask
				if msg.Text == "" {
					bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ."))
					user.ResetState(userId, userName, &userStates)
					continue
				}
				fastTask.TaskName = msg.Text
				b, err := json.Marshal(fastTask)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatID,
					"–í–≤–µ–¥–∏—Ç–µ, —Å –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. (–ù–∞–ø—Ä–∏–º–µ—Ä: 1h10m40s)"))

				state := user.State{Code: user.FAST_TASK_ENTER_INTERVAL, Request: string(b)}
				user.UpdateUser(userId, userName, state.Code, state.Request)
				userStates[userId] = state
			} else if userStates[userId].Code == user.FAST_TASK_ENTER_INTERVAL {
				var fastTask models.FastTask
				interval, err := time.ParseDuration(update.Message.Text)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID,
						"–ö–∞–∂–µ—Ç—Å—è, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑."))
					user.ResetState(userId, userName, &userStates)
					continue
				}
				currUser, err := user.GetUser(userId)
				if err != nil {
					log.Fatal(err)
				}
				data := []byte(currUser.StateRequest)

				err = json.Unmarshal(data, &fastTask)
				if err != nil {
					log.Fatal(err)
				}
				fastTask.NotifyInterval = interval

				err = fast_task.AddFastTask(userId, fastTask.TaskName, chatID, fastTask.NotifyInterval)

				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatID, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"))
				user.ResetState(userId, userName, &userStates)
			} else if userStates[userId].Code == user.FAST_TASK_DELETE {
				fastTasks, _, err := fast_task.OutputFastTasks(userId)

				// –°—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
				ftNumber, err := strconv.Atoi(msg.Text)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(chatID, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑."))
					user.ResetState(userId, userName, &userStates)
					continue
				}

				if ftNumber <= 0 || ftNumber > len(fastTasks) {
					bot.Send(tgbotapi.NewMessage(chatID,
						"–ö–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–æ–≥–æ –¥–µ–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑."))
					user.ResetState(userId, userName, &userStates)
					continue
				}

				fastTaskDeleteUrl := DefaultServiceUrl +
					fmt.Sprintf("%v/fast_task/%v", userId, fastTasks[ftNumber-1].Id)

				_, err = utils.Delete(fastTaskDeleteUrl)

				if err != nil {
					log.Fatal(err)
				}

				_, output, err := fast_task.OutputFastTasks(userId)
				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–ó–∞–¥–∞—á–∞ %v —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n", ftNumber)+output))
				user.ResetState(userId, userName, &userStates)
			}
		}
	}
}

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"
	"todo_web_service/src/telegram_bot/schedule"
	"todo_web_service/src/telegram_bot/utils"

	"github.com/Syfaro/telegram-bot-api"
	"todo_web_service/src/telegram_bot/fast_task"
	"todo_web_service/src/telegram_bot/user"
)

const (
	SuburbanServiceUrl = utils.DefaultServiceUrl + "suburban"
)

func main() {
	botToken := os.Getenv("BOT_TOKEN")

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}

	_, err = bot.RemoveWebhook()
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç API
	var userConfig = tgbotapi.NewUpdate(0)

	userConfig.Timeout = 60
	updates, err := bot.GetUpdatesChan(userConfig)
	if err != nil {
		log.Fatal(err)
	}

	// –í –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º fast_task'–∏.
	go fast_task.CheckFastTasks(&bot)

	// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
	userStates := make(map[int]user.State)
	err = user.GetStates(&userStates)

	if err != nil {
		log.Fatal(err)
	}
	// —á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
	for update := range updates {
		chatId := update.Message.Chat.ID
		userId := update.Message.From.ID
		userName := update.Message.From.UserName
		userStateCode := userStates[userId].Code

		switch update.Message.Command() {
		case "start":
			if user.IsStartState(userStateCode) {
				err = user.InitUser(userId, userName)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", userName)))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "userinfo":
			if user.IsStartState(userStateCode) {
				user, err := user.GetUser(userId)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s. \n–í–∞—à üÜî: %s",
					user.UserName, strconv.Itoa(user.Id))))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "suburban":
			if user.IsStartState(userStateCode) {
				resp, err := http.Get(SuburbanServiceUrl)
				if err != nil {
					log.Fatal(err)
				}

				body, _ := ioutil.ReadAll(resp.Body)

				bot.Send(tgbotapi.NewMessage(chatId, string(body)))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "add_fast_task":
			if user.IsStartState(userStateCode) {
				state := user.State{Code: user.FAST_TASK_ENTER_TITLE, Request: "{}"}
				user.SetState(userId, userName, &userStates, state)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "fast_tasks":
			if user.IsStartState(userStateCode) {
				// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
				_, reply, err := fast_task.OutputFastTasks(userId)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, reply))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "delete_fast_task":
			if user.IsStartState(userStateCode) {
				bot.Send(tgbotapi.NewMessage(chatId,
					"–ö–∞–∫–∞—è –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥–∞—á —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞? (–≤–≤–µ–¥–∏—Ç–µ –µ—ë –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä)"))
				_, output, err := fast_task.OutputFastTasks(userId)
				if err != nil {
					log.Fatal(err)
				}
				bot.Send(tgbotapi.NewMessage(chatId, output))
				user.SetState(userId, userName, &userStates, user.State{Code: user.FAST_TASK_DELETE_ENTER_NUM, Request: "{}"})
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "fill_schedule":
			if user.IsStartState(userStateCode) {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–µ–ª–∏ —é—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ:\n"+
					"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ /add_to_mon \n–í—Ç–æ—Ä–Ω–∏–∫ /add_to_tue \n–°—Ä–µ–¥–∞ /add_to_wed "+
					"\n–ß–µ—Ç–≤–µ—Ä–≥ /add_to_thu \n–ü—è—Ç–Ω–∏—Ü–∞ /add_to_fri \n–°—É–±–±–æ—Ç–∞ /add_to_sat \n–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ /add_to_sun"))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "full_schedule":
			if user.IsStartState(userStateCode) {
				schedule.GetFullSchedule(&bot, userId, chatId)
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
		case "today_schedule":
			if user.IsStartState(userStateCode) {
				_, output, err := schedule.GetWeekdaySchedule(userId, time.Now().Weekday())
				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatId, output))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "tomorrow_schedule":
			if user.IsStartState(userStateCode) {
				_, output, err := schedule.GetWeekdaySchedule(userId, schedule.NextWeekday(time.Now().Weekday()))
				if err != nil {
					log.Fatal(err)
				}

				bot.Send(tgbotapi.NewMessage(chatId, output))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "weekday_schedule":
			if user.IsStartState(userStateCode) {
				bot.Send(tgbotapi.NewMessage(chatId, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"))
				user.SetState(userId, userName, &userStates, user.State{Code: user.SCHEDULE_ENTER_OUTPUT_WEEKDAY, Request: "{}"})
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "delete_schedule":
			if user.IsStartState(userStateCode) {
				bot.Send(tgbotapi.NewMessage(chatId,
					"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear_schedule"))
				bot.Send(tgbotapi.NewMessage(chatId,
					"–ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n/delete_weekday_schedule"))
				bot.Send(tgbotapi.NewMessage(chatId,
					"–ï—Å–ª–∏ –≤–∞–º –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞–∫—É—é-—Ç–æ –∑–∞–¥–∞—á—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n/delete_schedule_task"))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "add_to_mon":
			if user.IsStartState(userStateCode) {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_MON)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "add_to_tue":
			if user.IsStartState(userStateCode) {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_TUE)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "add_to_wed":
			if user.IsStartState(userStateCode) {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_WED)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "add_to_thu":
			if user.IsStartState(userStateCode) {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_THU)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "add_to_fri":
			if user.IsStartState(userStateCode) {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_FRI)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "add_to_sat":
			if user.IsStartState(userStateCode) {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_SAT)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "add_to_sun":
			if user.IsStartState(userStateCode) {
				schedule.AddToWeekday(userId, userName, &userStates, user.SCHEDULE_FILL_SUN)
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞."))
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "update_schedule_task":
			if user.IsStartState(userStateCode) {
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É."))
				user.SetState(userId, userName, &userStates, user.State{Code: user.SCHEDULE_UPDATE_ENTER_WEEKDAY, Request: "{}"})
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "delete_schedule_task":
			if user.IsStartState(userStateCode) {
				bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É."))
				user.SetState(userId, userName, &userStates, user.State{Code: user.SCHEDULE_DELETE_WEEKDAY_TASK, Request: "{}"})
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "clear_schedule":
			if user.IsStartState(userStateCode) {
				bot.Send(tgbotapi.NewMessage(chatId, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–ù–û–°–¢–¨–Æ –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? –î–∞ –∏–ª–∏ –Ω–µ—Ç?"))
				user.SetState(userId, userName, &userStates, user.State{Code: user.SCHEDULE_DELETE_CLEARALL, Request: "{}"})
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "delete_weekday_schedule":
			if user.IsStartState(userStateCode) {
				bot.Send(tgbotapi.NewMessage(chatId, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å?"))
				user.SetState(userId, userName, &userStates, user.State{Code: user.SCHEDULE_DELETE_WEEKDAY, Request: "{}"})
			} else {
				user.SendEnteringNotFinished(&bot, chatId)
			}
			continue
		case "reset":
			user.ResetState(userId, userName, &userStates)
			bot.Send(tgbotapi.NewMessage(chatId, "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω."))
			continue
		}

		// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ.
		if userStateCode != user.START {
			/* FastTask */
			switch userStateCode {
			case user.FAST_TASK_ENTER_TITLE:
				if !fast_task.EnterTitle(&update, &bot, &userStates) {
					continue
				}
			case user.FAST_TASK_ENTER_INTERVAL:
				if !fast_task.EnterInterval(&update, &bot, &userStates) {
					continue
				}
			case user.FAST_TASK_DELETE_ENTER_NUM:
				if !fast_task.EnterDeleteNum(&update, &bot, &userStates) {
					continue
				}
				/* Schedule */
			case user.SCHEDULE_ENTER_TITLE:
				if !schedule.EnterTitle(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_ENTER_PLACE:
				if !schedule.EnterPlace(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_ENTER_SPEAKER:
				if !schedule.EnterSpeaker(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_ENTER_START:
				if !schedule.EnterStart(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_ENTER_END:
				if !schedule.EnterEnd(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_ENTER_OUTPUT_WEEKDAY:
				if !schedule.EnterOutputWeekday(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_UPDATE_ENTER_WEEKDAY:
				if !schedule.EnterUpdateWeekday(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_UPDATE_ENTER_NUM_TASK:
				if !schedule.EnterUpdateNumTask(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_UPDATE_ENTER_TITLE:
				if !schedule.EnterUpdateTitle(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_UPDATE_ENTER_PLACE:
				if !schedule.EnterUpdatePlace(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_UPDATE_ENTER_SPEAKER:
				if !schedule.EnterUpdateSpeaker(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_UPDATE_ENTER_START:
				if !schedule.EnterUpdateStart(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_UPDATE_ENTER_END:
				if !schedule.EnterUpdateEnd(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_DELETE_CLEARALL:
				if !schedule.EnterClearAll(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_DELETE_WEEKDAY_TASK:
				if !schedule.EnterDeleteWeekdayTask(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_DELETE_NUM_TASK:
				if !schedule.EnterDeleteNumTask(&update, &bot, &userStates) {
					continue
				}
			case user.SCHEDULE_DELETE_WEEKDAY:
				if !schedule.EnterDeleteWeekday(&update, &bot, &userStates) {
					continue
				}
			}
		}
	}
}
